Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]


Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]



class Solution {
public:
   
vector<int> productExceptSelf(vector<int>& nums) {
    int n = nums.size();
    
    int prefix = 1, suffix = 1;
    
    vector<int> prod(n,1);
    for (int i = 0;i<n;i++) {
       
         prod[i]*=prefix;
        prefix*=nums[i];
        
        
        prod[n-i-1]*=suffix;
        suffix*=nums[n-i-1];
     
    }
    return prod;
}
    
};


//method-1

//lets say we have 1 zero
// [-2,0,-1] => [0,2,0]

//lets say we have 2 0's
// [-2,0,0,-1] => [0,0,0,0]


// if no zeroes,
// then find the product of the entire  array

// and for each index do product/nums[i]



//method-2

//prefix-suffix approach

// [2,3,-2,4]

// prefix - [ 1,   2, 6, -12]
// suffix - [-24, -8, 4,  1]


// output would be => [-24,-16,24,-12]
